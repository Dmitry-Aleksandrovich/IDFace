import cv2
import time
import requests
import face_recognition
import telegram
import asyncio
import socket
import os

from dotenv import load_dotenv
from datetime import datetime

load_dotenv(dotenv_path=".tg_key.env")

#token your tg bot 
telegram_bot_token = os.getenv("telegram_bot_token")

#your tg chat id
telegram_chat_id = os.getenv("telegram_chat_id")

# –ü–æ–ª—É—á–µ–Ω–∏–µ IP-–∞–¥—Ä–µ—Å–∞ –∏ –¥–æ–º–µ–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏
def get_local_ip():
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(("8.8.8.8", 80))  # Google DNS ‚Äî –ø—Ä–æ—Å—Ç–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        ip = s.getsockname()[0]
        s.close()
        return ip
    except Exception:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å"

hostname = socket.gethostname()
local_ip = get_local_ip()
domain_name = socket.getfqdn()



# URL –¥–ª—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ /search-face
telegram_chat_id = os.getenv("url")
# –∫–∞–∫ –ø—Ä–∏–º–µ—Ä url = "http://localhost:8000/search-face"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telegram.Bot(token=telegram_bot_token)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–±-–∫–∞–º–µ—Ä—ã
cap = cv2.VideoCapture(0)
if not cap.isOpened():
    print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–º–µ—Ä—É")
    exit()

print("–ó–∞–ø—É—Å–∫ –∑–∞—Ö–≤–∞—Ç–∞ –∫–∞–¥—Ä–æ–≤ —Å –∫–∞–º–µ—Ä—ã –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥...")

def send_telegram_alert(message):
    telegram_api_url = f"https://api.telegram.org/bot{telegram_bot_token}/sendMessage"
    data = {
        'chat_id': telegram_chat_id,
        'text': message
    }
    try:
        response = requests.post(telegram_api_url, data=data)
        if response.status_code != 200:
            print(f"–û—à–∏–±–∫–∞ Telegram API: {response.text}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: {e}")


try:
    while True:
        ret, frame = cap.read()
        if not ret:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–¥—Ä —Å –∫–∞–º–µ—Ä—ã")
            break

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –∫–∞–¥—Ä
        #cv2.imshow("–ö–∞–º–µ—Ä–∞", frame)
        #if cv2.waitKey(1) & 0xFF == ord('q'):
        #    break

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞–¥—Ä –≤ RGB –¥–ª—è face_recognition
        rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        face_locations = face_recognition.face_locations(rgb_frame)
        print(f"–ù–∞–π–¥–µ–Ω–æ –ª–∏—Ü: {len(face_locations)}")

        if not face_locations:
            print("–õ–∏—Ü–æ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–∞ —Ç–µ–∫—É—â–µ–º –∫–∞–¥—Ä–µ, –ø—Ä–æ–ø—É—Å–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏")
            time.sleep(5)
            continue

        # –ö–æ–¥–∏—Ä—É–µ–º –∫–∞–¥—Ä –≤ JPEG
        ret, buffer = cv2.imencode('.jpg', frame)
        if not ret:
            print("–û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            continue

        # –ü–æ–ª—É—á–∞–µ–º –±–∞–π—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_bytes = buffer.tobytes()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        files = {
            "face_image": ("camera.jpg", image_bytes, "image/jpeg")
        }

        try:
            response = requests.post(url, files=files)
            data = response.json()
            print("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", data)

            current_unix_time = int(time.time())
            readable_time = datetime.fromtimestamp(current_unix_time).strftime("%Y-%m-%d %H:%M:%S")

            # –û–±—â–∞—è —á–∞—Å—Ç—å –¥–ª—è –ª—é–±–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            time_info = (
                f"Unix-–≤—Ä–µ–º—è: {current_unix_time}\n"
                f"–õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {readable_time}\n"
                f"IP-–∞–¥—Ä–µ—Å: {local_ip}\n"
                f"–î–æ–º–µ–Ω–Ω–æ–µ –∏–º—è: {domain_name}"
            )

            if data.get("matches"):
                for match in data["matches"]:
                    print(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å: {match}")
                    message = f"üîí –û–ø–æ–≤–µ—â–µ–Ω–∏–µ!\n–ù–∞–π–¥–µ–Ω–æ –ª–∏—Ü–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {match}\n{time_info}"
                    send_telegram_alert(message)
            else:
                print("–õ–∏—Ü–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                message = f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–æ–≤–æ–µ –ª–∏—Ü–æ, –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!\n{time_info}"
                send_telegram_alert(message)

        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞:", e)



        except Exception as e:
            print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞:", e)


        # –ü–∞—É–∑–∞ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–µ–π
        time.sleep(5)

except KeyboardInterrupt:
    print("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
finally:
    cap.release()
    cv2.destroyAllWindows()
